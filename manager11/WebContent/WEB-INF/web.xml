<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" id="WebApp_ID" version="3.1">
  <display-name>manager11</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
  
  <!--  -->
  <context-param>
  	<param-name>contextConfigLocation</param-name>
  	<param-value>classpath:applicationContextResources.xml</param-value>
  </context-param>
  <!-- applicationContextResources.xml 이 maven에서는 root-context.xml-->
  
  <listener>
  	<listener-class>
  		org.springframework.web.context.ContextLoaderListener
  	</listener-class>
  </listener>
  <!-- ContextLoaderListener는 contextConfigLocation관련 .xml 들이 모두 load 되도록 한다는 
  이것 선언안하면 /web-inf/applicationContext.xml 사용이 디폴트  -->
  
  <!-- 한글 문자 처리 -->
  <filter>
  	<filter-name>encodingFilter</filter-name>
  	<filter-class>
  		org.springframework.web.filter.CharacterEncodingFilter
  	</filter-class>
  	
  	<init-param>
  		<param-name>encoding</param-name>
  		<param-value>EUC-KR</param-value>
  	</init-param>
  	
  	<init-param>
  		<param-name>forceEncoding</param-name>
  		<param-value>true</param-value>
  	</init-param>
  </filter>
  
  <filter-mapping>
  	<filter-name>encodingFilter</filter-name>
  	<url-pattern>*.do</url-pattern>
  </filter-mapping>
  <!-- forceEncoding이 true 이면 encoding 값 euc-kr에 의해 
  request.setCharacterEncoding("euc-kr")
  response.setCharacterEncoding("euc-kr")로 처리된다.  -->
  
  <!--  -->
  <servlet>
  	<servlet-name>action</servlet-name>
  	<servlet-class>
  		org.springframework.web.servlet.DispatcherServlet
  	</servlet-class>
  	<init-param>
  		<param-name>contextConfigLocation</param-name>
  		<param-value>/WEB-INF/config/applicationContext.xml</param-value>
  	</init-param>
  </servlet>
  <servlet-mapping>
  	<servlet-name>action</servlet-name>
  	<url-pattern>*.do</url-pattern>
  </servlet-mapping>
  <!-- .do로 끝나는  url의경우  action 서블릿이름<servlet-name>   
  을 찾아가고, 그러면   DispatcherSerlvet이 처리한다는 
  처리방법을 알려면 applicationContext.xml보라는 
  즉, web관련 설정파일은 applicatinContext.xml에 적으라는-->
</web-app>
